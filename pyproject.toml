[tool.poetry]
name = "pomodoro-back"
version = "0.1.0"
description = ""
authors = ["Felipe Bastos Nunes <felipebastos@ifce.edu.br>"]
readme = "README.md"
packages = [{include = "pomodoro_back", from = "src"}]

[tool.taskipy.tasks]
audit = { cmd = 'pip-audit', help = 'Verifica falhas de segurança das dependências do projeto' }
check = { cmd = 'python src/manage.py check', help = 'Verifica a integridade do projeto' }
coverage = { cmd = 'pytest --cov', help = 'Verifica a cobertura de testes' }
dev = { cmd = 'python src/manage.py runserver', help = 'Executa o servidor de desenvolvimento.' }
format = { cmd = 'black src', help = 'Formata o código' }
imports = { cmd = 'isort src', help = 'Organiza os imports do projeto' }
lint = { cmd = 'pylint -f text src > linter-report.txt', help = 'Checagem estática' }
migrations = { cmd = 'python src/manage.py makemigrations && python src/manage.py migrate', help = 'Atualiza a base de dados.' }
onboard = { cmd = 'pre-commit install', help = 'Instala os hooks de pre-commit' }
requirements = { cmd = 'poetry export -o requirements.txt', help = 'Exporta o requirements.txt' }
secure = { cmd = 'bandit -r src/felipebastosprobr', help = 'Gera relatório de falhas de segurança no código.' }
test = { cmd = 'python src/manage.py test', help = 'Executa os testes' }

[tool.poetry.dependencies]
python = "^3.13"
django = "^5.1.4"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
pylint = "^3.3.3"
pytest = "^8.3.4"
pytest-django = "^4.9.0"
pytest-cov = "^6.0.0"
isort = "^5.13.2"
taskipy = "^1.14.1"
bandit = "^1.8.0"
pre-commit = "^4.0.1"
pip-audit = "^2.7.3"

[tool.isort]
profile = "black"

[tool.black]
include = '\.pyi?$'

[tool.pytest.ini_options]
pythonpath = "."
addopts = "--doctest-modules"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
